#!/usr/bin/env bash
#  ╔╗ ╔═╗╔═╗╦ ╦╔╦╗  - Comicly69
#  ╠╩╗╚═╗╠═╝║║║║║║  - https://github.com/Comicly69/dotfiles
#  ╚═╝╚═╝╩  ╚╩╝╩ ╩  - Comicly69@protonmail.com


#  ┬┌┬┐┌─┐┌─┐┬─┐┌┬┐┌─┐┌┐┌┌┬┐  ┬  ┬┌─┐┬─┐┬┌─┐┌┐ ┬  ┌─┐┌─┐
#  ││││├─┘│ │├┬┘ │ ├─┤│││ │   └┐┌┘├─┤├┬┘│├─┤├┴┐│  ├┤ └─┐
#  ┴┴ ┴┴  └─┘┴└─ ┴ ┴ ┴┘└┘ ┴    └┘ ┴ ┴┴└─┴┴ ┴└─┘┴─┘└─┘└─┘

read -r RICETHEME < "$HOME"/.config/bspwm/.rice
export RICETHEME
PATH="$HOME/.config/bspwm/scripts:$PATH"
rice_dir="$HOME/.config/bspwm/rices/$RICETHEME"

## Fix java applications
export _JAVA_AWT_WM_NONREPARENTING=1

#  ┬ ┬┌─┐┬─┐┬┌─┌─┐┌─┐┌─┐┌─┐┌─┐┌─┐
#  ││││ │├┬┘├┴┐└─┐├─┘├─┤│  ├┤ └─┐
#  └┴┘└─┘┴└─┴ ┴└─┘┴  ┴ ┴└─┘└─┘└─┘

workspaces() {
	name=1
	for monitor in $(bspc query -M); do
		bspc monitor "${monitor}" -n "$name" -d '1' '2' '3' '4' '5' '6'
		#bspc monitor ${monitor} -n "$name" -d '' '' '' '' '' ''
		(( name++ ))
	done
}

workspaces

#  ┌┐ ┌─┐┌─┐┬ ┬┌┬┐  ┌─┐┌─┐┌┐┌┌─┐┬┌─┐
#  ├┴┐└─┐├─┘││││││  │  │ ││││├┤ ││ ┬
#  └─┘└─┘┴  └┴┘┴ ┴  └─┘└─┘┘└┘└  ┴└─┘

bspc config external_rules_command $HOME/.config/bspwm/scripts/ExternalRules

bspc config split_ratio                   0.51
bspc config single_monocle                true
bspc config borderless_monocle            false
bspc config gapless_monocle               false

bspc config focus_follows_pointer         true
bspc config pointer_follows_focus         false
bspc config pointer_motion_interval       5
bspc config pointer_modifier              mod4 
bspc config pointer_action1               move 
bspc config pointer_action2               resize_side 
bspc config pointer_action3               resize_corner

#bspc wm --adopt-orphans
bspc rule -a scratch sticky=on state=floating focus=on

#  ┬  ┌─┐┬ ┬┌┐┌┌─┐┬ ┬  ┌─┐┌─┐─┐ ┬┬ ┬  ┬─┐┬┌─┐┌─┐┌─┐
#  │  ├─┤│ │││││  ├─┤  └─┐├┤ ┌┴┬┘└┬┘  ├┬┘││  ├┤ └─┐
#  ┴─┘┴ ┴└─┘┘└┘└─┘┴ ┴  └─┘└─┘┴ └─ ┴   ┴└─┴└─┘└─┘└─┘

# Set system vars for polybar
. SetSysVars

# Terminate already running polybar, eww, picom, sxhkd and dunst instances
processes=("picom" "polybar" "eww" "sxhkd" "dunst")

for process in "${processes[@]}"; do
  if pidof -q "$process"; then
    pkill -9 -x "$process" > /dev/null; sleep 0.1
  fi
done

# Load colors, dunst, bars and/or eww widgets
. ${rice_dir}/Theme.sh

# Launch picom // If you have old hardware or encounter problems 
# uncomment the picom "--legacy-backends" line and comment the current one.
picom --config "$HOME"/.config/bspwm/picom.conf &
#picom --legacy-backends --config "$HOME"/.config/bspwm/picom.conf &

# Launch dunst notification daemon
dunst -config "$HOME"/.config/bspwm/dunstrc &

# Set random wallpaper for actual rice
feh --no-fehbg --bg-fill ~/.config/bspwm/rices/pamela/walls/wall-04.webp

# Reload sxhkd daemon
sxhkd -c "$HOME"/.config/bspwm/sxhkdrc &

# Launch polkit
pidof -q polkit-gnome-authentication-agent-1 || { /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 & }

# Fix cursor
xsetroot -cursor_name left_ptr

INTERNAL_MONITOR="eDP"
EXTERNAL_MONITOR="HDMI-A-0"
# on first load setup default workspaces
if [[ "$1" = 0 ]]; then
  if [[ $(xrandr -q | grep "${EXTERNAL_MONITOR} connected") ]]; then
    bspc monitor "$EXTERNAL_MONITOR" -d 1 2 3 4 5
    bspc monitor "$INTERNAL_MONITOR" -d 6 7 8 9 10
    bspc wm -O "$EXTERNAL_MONITOR" "$INTERNAL_MONITOR"
  else
    bspc monitor "$INTERNAL_MONITOR" -d 1 2 3 4 5 6 7 8 9 10
  fi
fi

monitor_add() {
  # Move first 5 desktops to external monitor
  for desktop in $(bspc query -D --names -m "$INTERNAL_MONITOR" | sed 5q); do
    bspc desktop "$desktop" --to-monitor "$EXTERNAL_MONITOR"
  done

  # Remove default desktop created by bspwm
  bspc desktop Desktop --remove

  # reorder monitors
  bspc wm -O "$EXTERNAL_MONITOR" "$INTERNAL_MONITOR"
}

monitor_remove() {
  # Add default temp desktop because a minimum of one desktop is required per monitor
  bspc monitor "$EXTERNAL_MONITOR" -a Desktop

  # Move all desktops except the last default desktop to internal monitor
  for desktop in $(bspc query -D -m "$EXTERNAL_MONITOR");	do
    bspc desktop "$desktop" --to-monitor "$INTERNAL_MONITOR"
  done

  # delete default desktops
  bspc desktop Desktop --remove

  # reorder desktops
  bspc monitor "$INTERNAL_MONITOR" -o 1 2 3 4 5 6 7 8 9 10
}

if [[ $(xrandr -q | grep "${EXTERNAL_MONITOR} connected") ]]; then
  # set xrandr rules for docked setup
  xrandr --output "$INTERNAL_MONITOR" --mode 1920x1080 --pos 0x0 --rotate normal --output "$EXTERNAL_MONITOR" --primary --mode 1920x1080 --pos 1920x0 --rotate normal
  if [[ $(bspc query -D -m "${EXTERNAL_MONITOR}" | wc -l) -ne 5 ]]; then
    monitor_add
  fi
  bspc wm -O "$EXTERNAL_MONITOR" "$INTERNAL_MONITOR"
else
  # set xrandr rules for mobile setup
  xrandr --output "$INTERNAL_MONITOR" --primary --mode 1920x1080 --pos 0x0 --rotate normal --output "$EXTERNAL_MONITOR" --off
  if [[ $(bspc query -D -m "${INTERNAL_MONITOR}" | wc -l) -ne 10 ]]; then
    monitor_remove
  fi
fi
